
linked.elf:     file format elf32-tradbigmips


Disassembly of section .MIPS.abiflags:

00000400 <.MIPS.abiflags>:
 400:	00000100 	sll	zero,zero,0x4
 404:	01010001 	0x1010001
	...

Disassembly of section .reginfo:

00000418 <.reginfo>:
 418:	e000007c 	swc0	c0_index,124(zero)
	...
 42c:	00018d20 	0x18d20

Disassembly of section .note.gnu.build-id:

00000430 <.note.gnu.build-id>:
 430:	00000004 	sllv	zero,zero,zero
 434:	00000014 	0x14
 438:	00000003 	sra	zero,zero,0x0
 43c:	474e5500 	c1	0x14e5500
 440:	241e330c 	li	s8,13068
 444:	65c79de9 	0x65c79de9
 448:	ea59f633 	swc2	$25,-2509(s2)
 44c:	e4278c8b 	swc1	$f7,-29557(at)
 450:	ddfac7fc 	0xddfac7fc

Disassembly of section .text:

00000460 <clearScreen>:
Program description:

Tests the LED Matrix display.

*/
void clearScreen() {
 460:	27bdffe8 	addiu	sp,sp,-24
 464:	afbe0014 	sw	s8,20(sp)
 468:	03a0f025 	move	s8,sp
	//  less control but makes clearing it to black much faster.
	/*int *vramInt = (int *) 65536;
	for (int i = 0; i < 4096; i+=4) {
		*(vramInt + i) = 0;
	}*/
	char *vram = (char*) 65536;
 46c:	3c020001 	lui	v0,0x1
 470:	afc2000c 	sw	v0,12(s8)
	for (int i = 0; i < 4096; i++) {
 474:	afc00008 	sw	zero,8(s8)
 478:	1000000a 	b	4a4 <clearScreen+0x44>
 47c:	00000000 	nop
		*(vram + i) = 0;
 480:	8fc20008 	lw	v0,8(s8)
 484:	8fc3000c 	lw	v1,12(s8)
 488:	00000000 	nop
 48c:	00621021 	addu	v0,v1,v0
 490:	a0400000 	sb	zero,0(v0)
	/*int *vramInt = (int *) 65536;
	for (int i = 0; i < 4096; i+=4) {
		*(vramInt + i) = 0;
	}*/
	char *vram = (char*) 65536;
	for (int i = 0; i < 4096; i++) {
 494:	8fc20008 	lw	v0,8(s8)
 498:	00000000 	nop
 49c:	24420001 	addiu	v0,v0,1
 4a0:	afc20008 	sw	v0,8(s8)
 4a4:	8fc20008 	lw	v0,8(s8)
 4a8:	00000000 	nop
 4ac:	28421000 	slti	v0,v0,4096
 4b0:	1440fff3 	bnez	v0,480 <clearScreen+0x20>
 4b4:	00000000 	nop
		*(vram + i) = 0;
	}
}
 4b8:	00000000 	nop
 4bc:	03c0e825 	move	sp,s8
 4c0:	8fbe0014 	lw	s8,20(sp)
 4c4:	27bd0018 	addiu	sp,sp,24
 4c8:	03e00008 	jr	ra
 4cc:	00000000 	nop

000004d0 <setPixel>:
void setPixel(int x, int y, unsigned char pixel) {
 4d0:	27bdfff8 	addiu	sp,sp,-8
 4d4:	afbe0004 	sw	s8,4(sp)
 4d8:	03a0f025 	move	s8,sp
 4dc:	afc40008 	sw	a0,8(s8)
 4e0:	afc5000c 	sw	a1,12(s8)
 4e4:	00c01025 	move	v0,a2
 4e8:	a3c20010 	sb	v0,16(s8)
	// Shift by 6 is the same as multiplying by 64.
	*( (int*) (65536 + x + (y << 6)) ) = pixel;
 4ec:	8fc30008 	lw	v1,8(s8)
 4f0:	3c020001 	lui	v0,0x1
 4f4:	00621821 	addu	v1,v1,v0
 4f8:	8fc2000c 	lw	v0,12(s8)
 4fc:	00000000 	nop
 500:	00021180 	sll	v0,v0,0x6
 504:	00621021 	addu	v0,v1,v0
 508:	00401825 	move	v1,v0
 50c:	93c20010 	lbu	v0,16(s8)
 510:	00000000 	nop
 514:	ac620000 	sw	v0,0(v1)
}
 518:	00000000 	nop
 51c:	03c0e825 	move	sp,s8
 520:	8fbe0004 	lw	s8,4(sp)
 524:	27bd0008 	addiu	sp,sp,8
 528:	03e00008 	jr	ra
 52c:	00000000 	nop

00000530 <updateScreen>:
void updateScreen() {
 530:	27bdffe8 	addiu	sp,sp,-24
 534:	afbe0014 	sw	s8,20(sp)
 538:	03a0f025 	move	s8,sp
	// Write a "1" to bit "0" to make graphics changes take effect.
	int *matrix_settings = (int*) 275;
 53c:	24020113 	li	v0,275
 540:	afc20008 	sw	v0,8(s8)
	*matrix_settings = 1;
 544:	8fc20008 	lw	v0,8(s8)
 548:	24030001 	li	v1,1
 54c:	ac430000 	sw	v1,0(v0)
}
 550:	00000000 	nop
 554:	03c0e825 	move	sp,s8
 558:	8fbe0014 	lw	s8,20(sp)
 55c:	27bd0018 	addiu	sp,sp,24
 560:	03e00008 	jr	ra
 564:	00000000 	nop

00000568 <main>:
void main() {
 568:	27bdff58 	addiu	sp,sp,-168
 56c:	afbe00a4 	sw	s8,164(sp)
 570:	03a0f025 	move	s8,sp
	// This is the video buffer.
	// It starts at address 65536
	//  and ends at address 66560
	//  giving us 1024 words of space
	//  (or 4096 bytes.)
	char *vram = (char*) 65536;
 574:	3c020001 	lui	v0,0x1
 578:	afc2004c 	sw	v0,76(s8)
	
	// 256 is the address of the 7 segment display register.
	int *segmentedDisplay = (int *)255;
 57c:	240200ff 	li	v0,255
 580:	afc20050 	sw	v0,80(s8)

	// Write a "1" to bit "0" to make graphics changes take effect.
	int *matrix_settings = (int*) 275;
 584:	24020113 	li	v0,275
 588:	afc20054 	sw	v0,84(s8)

	// The locations of the keys we're charerested in.
	char *upArrow = (char*) 0xC1;
 58c:	240200c1 	li	v0,193
 590:	afc20058 	sw	v0,88(s8)
	char *downArrow = (char*) 0xC2;
 594:	240200c2 	li	v0,194
 598:	afc2005c 	sw	v0,92(s8)
	char *rightArrow = (char*) 0xC3;
 59c:	240200c3 	li	v0,195
 5a0:	afc20060 	sw	v0,96(s8)
	char *leftArrow = (char*) 0xB4;
 5a4:	240200b4 	li	v0,180
 5a8:	afc20064 	sw	v0,100(s8)
	char *rKey = (char*) 0x72;
 5ac:	24020072 	li	v0,114
 5b0:	afc20068 	sw	v0,104(s8)
	char *shift = (char*) 0xCB;
 5b4:	240200cb 	li	v0,203
 5b8:	afc2006c 	sw	v0,108(s8)
	char *hKey = (char*) 0x68;
 5bc:	24020068 	li	v0,104
 5c0:	afc20070 	sw	v0,112(s8)

	// Hardware counters
	int *milliCounter = (int*) 267;
 5c4:	2402010b 	li	v0,267
 5c8:	afc20074 	sw	v0,116(s8)
	int *microCounter = (int*) 271;
 5cc:	2402010f 	li	v0,271
 5d0:	afc20078 	sw	v0,120(s8)

	unsigned int counter = 0;
 5d4:	afc0007c 	sw	zero,124(s8)
	unsigned char currentColor = 0;
 5d8:	a3c00080 	sb	zero,128(s8)
	unsigned int lastSecond = 0;
 5dc:	afc00084 	sw	zero,132(s8)

	// Render some test images until an arrow keypress is detected.
	unsigned int currentTime = 0xFFFFFFFF;
 5e0:	2402ffff 	li	v0,-1
 5e4:	afc20088 	sw	v0,136(s8)
	unsigned int render1 = 0;
 5e8:	afc00008 	sw	zero,8(s8)
	unsigned int render2 = 0;
 5ec:	afc0000c 	sw	zero,12(s8)
	unsigned int reset1 = 0;
 5f0:	afc00010 	sw	zero,16(s8)
	while (1) {
		currentTime = *milliCounter;
 5f4:	8fc20074 	lw	v0,116(s8)
 5f8:	00000000 	nop
 5fc:	8c420000 	lw	v0,0(v0)
 600:	00000000 	nop
 604:	afc20088 	sw	v0,136(s8)

		if ((*matrix_settings & 1) != 0)
 608:	8fc20054 	lw	v0,84(s8)
 60c:	00000000 	nop
 610:	8c420000 	lw	v0,0(v0)
 614:	00000000 	nop
 618:	30420001 	andi	v0,v0,0x1
 61c:	144000f9 	bnez	v0,a04 <main+0x49c>
 620:	00000000 	nop
			continue;

		if (currentTime < render1) {
 624:	8fc30088 	lw	v1,136(s8)
 628:	8fc20008 	lw	v0,8(s8)
 62c:	00000000 	nop
 630:	0062102b 	sltu	v0,v1,v0
 634:	10400018 	beqz	v0,698 <main+0x130>
 638:	00000000 	nop
			// Render an all red screen
			for (int i = 0; i < 4096; i++) {
 63c:	afc00014 	sw	zero,20(s8)
 640:	1000000b 	b	670 <main+0x108>
 644:	00000000 	nop
				*(vram + i) = 0b00010000;
 648:	8fc20014 	lw	v0,20(s8)
 64c:	8fc3004c 	lw	v1,76(s8)
 650:	00000000 	nop
 654:	00621021 	addu	v0,v1,v0
 658:	24030010 	li	v1,16
 65c:	a0430000 	sb	v1,0(v0)
		if ((*matrix_settings & 1) != 0)
			continue;

		if (currentTime < render1) {
			// Render an all red screen
			for (int i = 0; i < 4096; i++) {
 660:	8fc20014 	lw	v0,20(s8)
 664:	00000000 	nop
 668:	24420001 	addiu	v0,v0,1
 66c:	afc20014 	sw	v0,20(s8)
 670:	8fc20014 	lw	v0,20(s8)
 674:	00000000 	nop
 678:	28421000 	slti	v0,v0,4096
 67c:	1440fff2 	bnez	v0,648 <main+0xe0>
 680:	00000000 	nop
				*(vram + i) = 0b00010000;
			}
			*matrix_settings = 1;
 684:	8fc20054 	lw	v0,84(s8)
 688:	24030001 	li	v1,1
 68c:	ac430000 	sw	v1,0(v0)
 690:	100000b6 	b	96c <main+0x404>
 694:	00000000 	nop
		}
		else if (currentTime >= render1 && currentTime < render2) {
 698:	8fc30088 	lw	v1,136(s8)
 69c:	8fc20008 	lw	v0,8(s8)
 6a0:	00000000 	nop
 6a4:	0062102b 	sltu	v0,v1,v0
 6a8:	1440001e 	bnez	v0,724 <main+0x1bc>
 6ac:	00000000 	nop
 6b0:	8fc30088 	lw	v1,136(s8)
 6b4:	8fc2000c 	lw	v0,12(s8)
 6b8:	00000000 	nop
 6bc:	0062102b 	sltu	v0,v1,v0
 6c0:	10400018 	beqz	v0,724 <main+0x1bc>
 6c4:	00000000 	nop
			// Render an all light blue screen
			for (int i = 0; i < 4096; i++) {
 6c8:	afc00018 	sw	zero,24(s8)
 6cc:	1000000b 	b	6fc <main+0x194>
 6d0:	00000000 	nop
				*(vram + i) = 0b00000111;
 6d4:	8fc20018 	lw	v0,24(s8)
 6d8:	8fc3004c 	lw	v1,76(s8)
 6dc:	00000000 	nop
 6e0:	00621021 	addu	v0,v1,v0
 6e4:	24030007 	li	v1,7
 6e8:	a0430000 	sb	v1,0(v0)
			}
			*matrix_settings = 1;
		}
		else if (currentTime >= render1 && currentTime < render2) {
			// Render an all light blue screen
			for (int i = 0; i < 4096; i++) {
 6ec:	8fc20018 	lw	v0,24(s8)
 6f0:	00000000 	nop
 6f4:	24420001 	addiu	v0,v0,1
 6f8:	afc20018 	sw	v0,24(s8)
 6fc:	8fc20018 	lw	v0,24(s8)
 700:	00000000 	nop
 704:	28421000 	slti	v0,v0,4096
 708:	1440fff2 	bnez	v0,6d4 <main+0x16c>
 70c:	00000000 	nop
				*(vram + i) = 0b00000111;
			}
			*matrix_settings = 1;
 710:	8fc20054 	lw	v0,84(s8)
 714:	24030001 	li	v1,1
 718:	ac430000 	sw	v1,0(v0)
 71c:	10000093 	b	96c <main+0x404>
 720:	00000000 	nop
		}
		else if (currentTime >= render2 && currentTime < reset1) {
 724:	8fc30088 	lw	v1,136(s8)
 728:	8fc2000c 	lw	v0,12(s8)
 72c:	00000000 	nop
 730:	0062102b 	sltu	v0,v1,v0
 734:	1440007b 	bnez	v0,924 <main+0x3bc>
 738:	00000000 	nop
 73c:	8fc30088 	lw	v1,136(s8)
 740:	8fc20010 	lw	v0,16(s8)
 744:	00000000 	nop
 748:	0062102b 	sltu	v0,v1,v0
 74c:	10400075 	beqz	v0,924 <main+0x3bc>
 750:	00000000 	nop
			for (int i = 0; i < 2048; i+=64) {
 754:	afc0001c 	sw	zero,28(s8)
 758:	10000030 	b	81c <main+0x2b4>
 75c:	00000000 	nop
				for(int g = 0; g < 32; g++) {
 760:	afc00020 	sw	zero,32(s8)
 764:	1000000e 	b	7a0 <main+0x238>
 768:	00000000 	nop
					*(vram + i + g) = 0b00010000; //r
 76c:	8fc3001c 	lw	v1,28(s8)
 770:	8fc20020 	lw	v0,32(s8)
 774:	00000000 	nop
 778:	00621021 	addu	v0,v1,v0
 77c:	8fc3004c 	lw	v1,76(s8)
 780:	00000000 	nop
 784:	00621021 	addu	v0,v1,v0
 788:	24030010 	li	v1,16
 78c:	a0430000 	sb	v1,0(v0)
			}
			*matrix_settings = 1;
		}
		else if (currentTime >= render2 && currentTime < reset1) {
			for (int i = 0; i < 2048; i+=64) {
				for(int g = 0; g < 32; g++) {
 790:	8fc20020 	lw	v0,32(s8)
 794:	00000000 	nop
 798:	24420001 	addiu	v0,v0,1
 79c:	afc20020 	sw	v0,32(s8)
 7a0:	8fc20020 	lw	v0,32(s8)
 7a4:	00000000 	nop
 7a8:	28420020 	slti	v0,v0,32
 7ac:	1440ffef 	bnez	v0,76c <main+0x204>
 7b0:	00000000 	nop
					*(vram + i + g) = 0b00010000; //r
				}
				for(int g = 32; g < 64; g++) {
 7b4:	24020020 	li	v0,32
 7b8:	afc20024 	sw	v0,36(s8)
 7bc:	1000000e 	b	7f8 <main+0x290>
 7c0:	00000000 	nop
					*(vram + i + g) = 0b00000100; //g
 7c4:	8fc3001c 	lw	v1,28(s8)
 7c8:	8fc20024 	lw	v0,36(s8)
 7cc:	00000000 	nop
 7d0:	00621021 	addu	v0,v1,v0
 7d4:	8fc3004c 	lw	v1,76(s8)
 7d8:	00000000 	nop
 7dc:	00621021 	addu	v0,v1,v0
 7e0:	24030004 	li	v1,4
 7e4:	a0430000 	sb	v1,0(v0)
		else if (currentTime >= render2 && currentTime < reset1) {
			for (int i = 0; i < 2048; i+=64) {
				for(int g = 0; g < 32; g++) {
					*(vram + i + g) = 0b00010000; //r
				}
				for(int g = 32; g < 64; g++) {
 7e8:	8fc20024 	lw	v0,36(s8)
 7ec:	00000000 	nop
 7f0:	24420001 	addiu	v0,v0,1
 7f4:	afc20024 	sw	v0,36(s8)
 7f8:	8fc20024 	lw	v0,36(s8)
 7fc:	00000000 	nop
 800:	28420040 	slti	v0,v0,64
 804:	1440ffef 	bnez	v0,7c4 <main+0x25c>
 808:	00000000 	nop
				*(vram + i) = 0b00000111;
			}
			*matrix_settings = 1;
		}
		else if (currentTime >= render2 && currentTime < reset1) {
			for (int i = 0; i < 2048; i+=64) {
 80c:	8fc2001c 	lw	v0,28(s8)
 810:	00000000 	nop
 814:	24420040 	addiu	v0,v0,64
 818:	afc2001c 	sw	v0,28(s8)
 81c:	8fc2001c 	lw	v0,28(s8)
 820:	00000000 	nop
 824:	28420800 	slti	v0,v0,2048
 828:	1440ffcd 	bnez	v0,760 <main+0x1f8>
 82c:	00000000 	nop
				for(int g = 32; g < 64; g++) {
					*(vram + i + g) = 0b00000100; //g
				}
			}

			for (int i = 2048; i < 4096; i+=64) {
 830:	24020800 	li	v0,2048
 834:	afc20028 	sw	v0,40(s8)
 838:	10000030 	b	8fc <main+0x394>
 83c:	00000000 	nop
				for(int g = 0; g < 32; g++) {
 840:	afc0002c 	sw	zero,44(s8)
 844:	1000000e 	b	880 <main+0x318>
 848:	00000000 	nop
					*(vram + i + g) = 0b00000001; //b
 84c:	8fc30028 	lw	v1,40(s8)
 850:	8fc2002c 	lw	v0,44(s8)
 854:	00000000 	nop
 858:	00621021 	addu	v0,v1,v0
 85c:	8fc3004c 	lw	v1,76(s8)
 860:	00000000 	nop
 864:	00621021 	addu	v0,v1,v0
 868:	24030001 	li	v1,1
 86c:	a0430000 	sb	v1,0(v0)
					*(vram + i + g) = 0b00000100; //g
				}
			}

			for (int i = 2048; i < 4096; i+=64) {
				for(int g = 0; g < 32; g++) {
 870:	8fc2002c 	lw	v0,44(s8)
 874:	00000000 	nop
 878:	24420001 	addiu	v0,v0,1
 87c:	afc2002c 	sw	v0,44(s8)
 880:	8fc2002c 	lw	v0,44(s8)
 884:	00000000 	nop
 888:	28420020 	slti	v0,v0,32
 88c:	1440ffef 	bnez	v0,84c <main+0x2e4>
 890:	00000000 	nop
					*(vram + i + g) = 0b00000001; //b
				}
				for(int g = 32; g < 64; g++) {
 894:	24020020 	li	v0,32
 898:	afc20030 	sw	v0,48(s8)
 89c:	1000000e 	b	8d8 <main+0x370>
 8a0:	00000000 	nop
					*(vram + i + g) = 0b00010101; //white
 8a4:	8fc30028 	lw	v1,40(s8)
 8a8:	8fc20030 	lw	v0,48(s8)
 8ac:	00000000 	nop
 8b0:	00621021 	addu	v0,v1,v0
 8b4:	8fc3004c 	lw	v1,76(s8)
 8b8:	00000000 	nop
 8bc:	00621021 	addu	v0,v1,v0
 8c0:	24030015 	li	v1,21
 8c4:	a0430000 	sb	v1,0(v0)

			for (int i = 2048; i < 4096; i+=64) {
				for(int g = 0; g < 32; g++) {
					*(vram + i + g) = 0b00000001; //b
				}
				for(int g = 32; g < 64; g++) {
 8c8:	8fc20030 	lw	v0,48(s8)
 8cc:	00000000 	nop
 8d0:	24420001 	addiu	v0,v0,1
 8d4:	afc20030 	sw	v0,48(s8)
 8d8:	8fc20030 	lw	v0,48(s8)
 8dc:	00000000 	nop
 8e0:	28420040 	slti	v0,v0,64
 8e4:	1440ffef 	bnez	v0,8a4 <main+0x33c>
 8e8:	00000000 	nop
				for(int g = 32; g < 64; g++) {
					*(vram + i + g) = 0b00000100; //g
				}
			}

			for (int i = 2048; i < 4096; i+=64) {
 8ec:	8fc20028 	lw	v0,40(s8)
 8f0:	00000000 	nop
 8f4:	24420040 	addiu	v0,v0,64
 8f8:	afc20028 	sw	v0,40(s8)
 8fc:	8fc20028 	lw	v0,40(s8)
 900:	00000000 	nop
 904:	28421000 	slti	v0,v0,4096
 908:	1440ffcd 	bnez	v0,840 <main+0x2d8>
 90c:	00000000 	nop
				}
				for(int g = 32; g < 64; g++) {
					*(vram + i + g) = 0b00010101; //white
				}
			}
			*matrix_settings = 1;
 910:	8fc20054 	lw	v0,84(s8)
 914:	24030001 	li	v1,1
 918:	ac430000 	sw	v1,0(v0)
 91c:	10000013 	b	96c <main+0x404>
 920:	00000000 	nop
		}
		else if (currentTime >= reset1) {
 924:	8fc30088 	lw	v1,136(s8)
 928:	8fc20010 	lw	v0,16(s8)
 92c:	00000000 	nop
 930:	0062102b 	sltu	v0,v1,v0
 934:	1440000d 	bnez	v0,96c <main+0x404>
 938:	00000000 	nop
			render1 = currentTime + 1000;
 93c:	8fc20088 	lw	v0,136(s8)
 940:	00000000 	nop
 944:	244203e8 	addiu	v0,v0,1000
 948:	afc20008 	sw	v0,8(s8)
			render2 = currentTime + 2000;
 94c:	8fc20088 	lw	v0,136(s8)
 950:	00000000 	nop
 954:	244207d0 	addiu	v0,v0,2000
 958:	afc2000c 	sw	v0,12(s8)
			reset1 = currentTime + 3000;
 95c:	8fc20088 	lw	v0,136(s8)
 960:	00000000 	nop
 964:	24420bb8 	addiu	v0,v0,3000
 968:	afc20010 	sw	v0,16(s8)
		}

		// Show the number of seconds onscreen
		*segmentedDisplay = (*milliCounter / 1000);
 96c:	8fc20074 	lw	v0,116(s8)
 970:	00000000 	nop
 974:	8c430000 	lw	v1,0(v0)
 978:	240203e8 	li	v0,1000
 97c:	14400002 	bnez	v0,988 <main+0x420>
 980:	0062001a 	div	zero,v1,v0
 984:	0007000d 	break	0x7
 988:	00001010 	mfhi	v0
 98c:	00001812 	mflo	v1
 990:	8fc20050 	lw	v0,80(s8)
 994:	00000000 	nop
 998:	ac430000 	sw	v1,0(v0)

		// Leave this loop if any arrow key is pressed.
		if (*upArrow != 0 || *downArrow != 0 || *leftArrow != 0 || *rightArrow != 0)
 99c:	8fc20058 	lw	v0,88(s8)
 9a0:	00000000 	nop
 9a4:	80420000 	lb	v0,0(v0)
 9a8:	00000000 	nop
 9ac:	14400018 	bnez	v0,a10 <main+0x4a8>
 9b0:	00000000 	nop
 9b4:	8fc2005c 	lw	v0,92(s8)
 9b8:	00000000 	nop
 9bc:	80420000 	lb	v0,0(v0)
 9c0:	00000000 	nop
 9c4:	14400012 	bnez	v0,a10 <main+0x4a8>
 9c8:	00000000 	nop
 9cc:	8fc20064 	lw	v0,100(s8)
 9d0:	00000000 	nop
 9d4:	80420000 	lb	v0,0(v0)
 9d8:	00000000 	nop
 9dc:	1440000c 	bnez	v0,a10 <main+0x4a8>
 9e0:	00000000 	nop
 9e4:	8fc20060 	lw	v0,96(s8)
 9e8:	00000000 	nop
 9ec:	80420000 	lb	v0,0(v0)
 9f0:	00000000 	nop
 9f4:	14400006 	bnez	v0,a10 <main+0x4a8>
 9f8:	00000000 	nop
 9fc:	1000fefd 	b	5f4 <main+0x8c>
 a00:	00000000 	nop
	unsigned int reset1 = 0;
	while (1) {
		currentTime = *milliCounter;

		if ((*matrix_settings & 1) != 0)
			continue;
 a04:	00000000 	nop
		*segmentedDisplay = (*milliCounter / 1000);

		// Leave this loop if any arrow key is pressed.
		if (*upArrow != 0 || *downArrow != 0 || *leftArrow != 0 || *rightArrow != 0)
			break;
	}
 a08:	1000fefa 	b	5f4 <main+0x8c>
 a0c:	00000000 	nop

	// Box position
	int b_x = 32;
 a10:	24020020 	li	v0,32
 a14:	afc20034 	sw	v0,52(s8)
	int b_y = 32;
 a18:	24020020 	li	v0,32
 a1c:	afc20038 	sw	v0,56(s8)
	unsigned int lastDisplayTime = *milliCounter;
 a20:	8fc20074 	lw	v0,116(s8)
 a24:	00000000 	nop
 a28:	8c420000 	lw	v0,0(v0)
 a2c:	00000000 	nop
 a30:	afc2008c 	sw	v0,140(s8)
	unsigned int lastMoveTime = *milliCounter;
 a34:	8fc20074 	lw	v0,116(s8)
 a38:	00000000 	nop
 a3c:	8c420000 	lw	v0,0(v0)
 a40:	00000000 	nop
 a44:	afc2003c 	sw	v0,60(s8)
	while(1) {
		// Get the arrow keys.
		int xMod = (*leftArrow != 0 ? -1 : 0) + (*rightArrow != 0 ? 1 : 0);
 a48:	8fc20064 	lw	v0,100(s8)
 a4c:	00000000 	nop
 a50:	80420000 	lb	v0,0(v0)
 a54:	00000000 	nop
 a58:	10400004 	beqz	v0,a6c <main+0x504>
 a5c:	00000000 	nop
 a60:	2402ffff 	li	v0,-1
 a64:	10000002 	b	a70 <main+0x508>
 a68:	00000000 	nop
 a6c:	00001025 	move	v0,zero
 a70:	8fc30060 	lw	v1,96(s8)
 a74:	00000000 	nop
 a78:	80630000 	lb	v1,0(v1)
 a7c:	00000000 	nop
 a80:	0003182b 	sltu	v1,zero,v1
 a84:	306300ff 	andi	v1,v1,0xff
 a88:	00431021 	addu	v0,v0,v1
 a8c:	afc20090 	sw	v0,144(s8)
		int yMod = (*downArrow != 0 ? 1 : 0) + (*upArrow != 0 ? -1 : 0);
 a90:	8fc2005c 	lw	v0,92(s8)
 a94:	00000000 	nop
 a98:	80420000 	lb	v0,0(v0)
 a9c:	00000000 	nop
 aa0:	0002102b 	sltu	v0,zero,v0
 aa4:	304200ff 	andi	v0,v0,0xff
 aa8:	00401825 	move	v1,v0
 aac:	8fc20058 	lw	v0,88(s8)
 ab0:	00000000 	nop
 ab4:	80420000 	lb	v0,0(v0)
 ab8:	00000000 	nop
 abc:	10400004 	beqz	v0,ad0 <main+0x568>
 ac0:	00000000 	nop
 ac4:	2402ffff 	li	v0,-1
 ac8:	10000002 	b	ad4 <main+0x56c>
 acc:	00000000 	nop
 ad0:	00001025 	move	v0,zero
 ad4:	00621021 	addu	v0,v1,v0
 ad8:	afc20094 	sw	v0,148(s8)

		// Only move the box if a little time has passed.
		if ((*milliCounter) > lastMoveTime + 33) {
 adc:	8fc20074 	lw	v0,116(s8)
 ae0:	00000000 	nop
 ae4:	8c420000 	lw	v0,0(v0)
 ae8:	00000000 	nop
 aec:	00401825 	move	v1,v0
 af0:	8fc2003c 	lw	v0,60(s8)
 af4:	00000000 	nop
 af8:	24420021 	addiu	v0,v0,33
 afc:	0043102b 	sltu	v0,v0,v1
 b00:	10400010 	beqz	v0,b44 <main+0x5dc>
 b04:	00000000 	nop
			lastMoveTime = *milliCounter;
 b08:	8fc20074 	lw	v0,116(s8)
 b0c:	00000000 	nop
 b10:	8c420000 	lw	v0,0(v0)
 b14:	00000000 	nop
 b18:	afc2003c 	sw	v0,60(s8)
			b_x += xMod;
 b1c:	8fc30034 	lw	v1,52(s8)
 b20:	8fc20090 	lw	v0,144(s8)
 b24:	00000000 	nop
 b28:	00621021 	addu	v0,v1,v0
 b2c:	afc20034 	sw	v0,52(s8)
			b_y += yMod;
 b30:	8fc30038 	lw	v1,56(s8)
 b34:	8fc20094 	lw	v0,148(s8)
 b38:	00000000 	nop
 b3c:	00621021 	addu	v0,v1,v0
 b40:	afc20038 	sw	v0,56(s8)
		}

		// Don't write anything until the buffers actually switch
		if ((*matrix_settings & 1) == 0) {
 b44:	8fc20054 	lw	v0,84(s8)
 b48:	00000000 	nop
 b4c:	8c420000 	lw	v0,0(v0)
 b50:	00000000 	nop
 b54:	30420001 	andi	v0,v0,0x1
 b58:	1440006d 	bnez	v0,d10 <main+0x7a8>
 b5c:	00000000 	nop
			if ((*hKey) != 1) {
 b60:	8fc20070 	lw	v0,112(s8)
 b64:	00000000 	nop
 b68:	80430000 	lb	v1,0(v0)
 b6c:	24020001 	li	v0,1
 b70:	10620013 	beq	v1,v0,bc0 <main+0x658>
 b74:	00000000 	nop
				// Clear the display.
				for (int i = 0; i < 4096; i++) {
 b78:	afc00040 	sw	zero,64(s8)
 b7c:	1000000b 	b	bac <main+0x644>
 b80:	00000000 	nop
					*(vram + i) = 0b00000001;
 b84:	8fc20040 	lw	v0,64(s8)
 b88:	8fc3004c 	lw	v1,76(s8)
 b8c:	00000000 	nop
 b90:	00621021 	addu	v0,v1,v0
 b94:	24030001 	li	v1,1
 b98:	a0430000 	sb	v1,0(v0)

		// Don't write anything until the buffers actually switch
		if ((*matrix_settings & 1) == 0) {
			if ((*hKey) != 1) {
				// Clear the display.
				for (int i = 0; i < 4096; i++) {
 b9c:	8fc20040 	lw	v0,64(s8)
 ba0:	00000000 	nop
 ba4:	24420001 	addiu	v0,v0,1
 ba8:	afc20040 	sw	v0,64(s8)
 bac:	8fc20040 	lw	v0,64(s8)
 bb0:	00000000 	nop
 bb4:	28421000 	slti	v0,v0,4096
 bb8:	1440fff2 	bnez	v0,b84 <main+0x61c>
 bbc:	00000000 	nop
					*(vram + i) = 0b00000001;
				}	
			}
	
			// Draw an 8x8 box.
			for (int x = -1; x <= 1; x++) {
 bc0:	2402ffff 	li	v0,-1
 bc4:	afc20044 	sw	v0,68(s8)
 bc8:	10000049 	b	cf0 <main+0x788>
 bcc:	00000000 	nop
				for (int y = -1; y <= 1; y++) {
 bd0:	2402ffff 	li	v0,-1
 bd4:	afc20048 	sw	v0,72(s8)
 bd8:	1000003c 	b	ccc <main+0x764>
 bdc:	00000000 	nop
					int currentX = b_x + x;
 be0:	8fc30034 	lw	v1,52(s8)
 be4:	8fc20044 	lw	v0,68(s8)
 be8:	00000000 	nop
 bec:	00621021 	addu	v0,v1,v0
 bf0:	afc20098 	sw	v0,152(s8)
					int currentY = b_y + y;
 bf4:	8fc30038 	lw	v1,56(s8)
 bf8:	8fc20048 	lw	v0,72(s8)
 bfc:	00000000 	nop
 c00:	00621021 	addu	v0,v1,v0
 c04:	afc2009c 	sw	v0,156(s8)
					if (currentX >= 0 && currentX < 64 && currentY >= 0 && currentY < 64) {
 c08:	8fc20098 	lw	v0,152(s8)
 c0c:	00000000 	nop
 c10:	0440002a 	bltz	v0,cbc <main+0x754>
 c14:	00000000 	nop
 c18:	8fc20098 	lw	v0,152(s8)
 c1c:	00000000 	nop
 c20:	28420040 	slti	v0,v0,64
 c24:	10400025 	beqz	v0,cbc <main+0x754>
 c28:	00000000 	nop
 c2c:	8fc2009c 	lw	v0,156(s8)
 c30:	00000000 	nop
 c34:	04400021 	bltz	v0,cbc <main+0x754>
 c38:	00000000 	nop
 c3c:	8fc2009c 	lw	v0,156(s8)
 c40:	00000000 	nop
 c44:	28420040 	slti	v0,v0,64
 c48:	1040001c 	beqz	v0,cbc <main+0x754>
 c4c:	00000000 	nop
						*(vram + currentX + (64 * currentY)) = (((*milliCounter / 1000)) % 2 != 0) ? 0b00001100 : 0b00010000;
 c50:	8fc2009c 	lw	v0,156(s8)
 c54:	00000000 	nop
 c58:	00021180 	sll	v0,v0,0x6
 c5c:	00401825 	move	v1,v0
 c60:	8fc20098 	lw	v0,152(s8)
 c64:	00000000 	nop
 c68:	00621021 	addu	v0,v1,v0
 c6c:	8fc3004c 	lw	v1,76(s8)
 c70:	00000000 	nop
 c74:	00621821 	addu	v1,v1,v0
 c78:	8fc20074 	lw	v0,116(s8)
 c7c:	00000000 	nop
 c80:	8c440000 	lw	a0,0(v0)
 c84:	240203e8 	li	v0,1000
 c88:	14400002 	bnez	v0,c94 <main+0x72c>
 c8c:	0082001a 	div	zero,a0,v0
 c90:	0007000d 	break	0x7
 c94:	00001010 	mfhi	v0
 c98:	00001012 	mflo	v0
 c9c:	30420001 	andi	v0,v0,0x1
 ca0:	10400004 	beqz	v0,cb4 <main+0x74c>
 ca4:	00000000 	nop
 ca8:	2402000c 	li	v0,12
 cac:	10000002 	b	cb8 <main+0x750>
 cb0:	00000000 	nop
 cb4:	24020010 	li	v0,16
 cb8:	a0620000 	sb	v0,0(v1)
				}	
			}
	
			// Draw an 8x8 box.
			for (int x = -1; x <= 1; x++) {
				for (int y = -1; y <= 1; y++) {
 cbc:	8fc20048 	lw	v0,72(s8)
 cc0:	00000000 	nop
 cc4:	24420001 	addiu	v0,v0,1
 cc8:	afc20048 	sw	v0,72(s8)
 ccc:	8fc20048 	lw	v0,72(s8)
 cd0:	00000000 	nop
 cd4:	28420002 	slti	v0,v0,2
 cd8:	1440ffc1 	bnez	v0,be0 <main+0x678>
 cdc:	00000000 	nop
					*(vram + i) = 0b00000001;
				}	
			}
	
			// Draw an 8x8 box.
			for (int x = -1; x <= 1; x++) {
 ce0:	8fc20044 	lw	v0,68(s8)
 ce4:	00000000 	nop
 ce8:	24420001 	addiu	v0,v0,1
 cec:	afc20044 	sw	v0,68(s8)
 cf0:	8fc20044 	lw	v0,68(s8)
 cf4:	00000000 	nop
 cf8:	28420002 	slti	v0,v0,2
 cfc:	1440ffb4 	bnez	v0,bd0 <main+0x668>
 d00:	00000000 	nop
						*(vram + currentX + (64 * currentY)) = (((*milliCounter / 1000)) % 2 != 0) ? 0b00001100 : 0b00010000;
					}
				}
			}
			
			*matrix_settings = 1;
 d04:	8fc20054 	lw	v0,84(s8)
 d08:	24030001 	li	v1,1
 d0c:	ac430000 	sw	v1,0(v0)
		}


		// Show the number of seconds onscreen
		*segmentedDisplay = (*milliCounter);
 d10:	8fc20074 	lw	v0,116(s8)
 d14:	00000000 	nop
 d18:	8c430000 	lw	v1,0(v0)
 d1c:	8fc20050 	lw	v0,80(s8)
 d20:	00000000 	nop
 d24:	ac430000 	sw	v1,0(v0)
	}
 d28:	1000ff47 	b	a48 <main+0x4e0>
 d2c:	00000000 	nop

Disassembly of section .comment:

00000000 <.comment>:
   0:	4743433a 	c1	0x143433a
   4:	20285562 	addi	t0,at,21858
   8:	756e7475 	jalx	5b9d1d4 <_gp+0x5b844b4>
   c:	20352e34 	addi	s5,at,11828
  10:	2e302d36 	sltiu	s0,s1,11574
  14:	7562756e 	jalx	589d5b8 <_gp+0x5884898>
  18:	7475317e 	jalx	1d4c5f8 <_gp+0x1d338d8>
  1c:	31362e30 	andi	s6,t1,0x2e30
  20:	342e3929 	ori	t6,at,0x3929
  24:	20352e34 	addi	s5,at,11828
  28:	2e302032 	sltiu	s0,s1,8242
  2c:	30313630 	andi	s1,at,0x3630
  30:	36303900 	ori	s0,s1,0x3900

Disassembly of section .pdr:

00000000 <.pdr>:
   0:	00000460 	0x460
   4:	40000000 	mfc0	zero,c0_index
   8:	fffffffc 	0xfffffffc
	...
  14:	00000018 	mult	zero,zero
  18:	0000001e 	0x1e
  1c:	0000001f 	0x1f
  20:	000004d0 	0x4d0
  24:	40000000 	mfc0	zero,c0_index
  28:	fffffffc 	0xfffffffc
	...
  34:	00000008 	jr	zero
  38:	0000001e 	0x1e
  3c:	0000001f 	0x1f
  40:	00000530 	0x530
  44:	40000000 	mfc0	zero,c0_index
  48:	fffffffc 	0xfffffffc
	...
  54:	00000018 	mult	zero,zero
  58:	0000001e 	0x1e
  5c:	0000001f 	0x1f
  60:	00000568 	0x568
  64:	40000000 	mfc0	zero,c0_index
  68:	fffffffc 	0xfffffffc
	...
  74:	000000a8 	0xa8
  78:	0000001e 	0x1e
  7c:	0000001f 	0x1f

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	0x1c
   4:	00020000 	sll	zero,v0,0x0
   8:	00000400 	sll	zero,zero,0x10
   c:	00000000 	nop
  10:	00000460 	0x460
  14:	000008d0 	0x8d0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003ae 	0x3ae
   4:	00040000 	sll	zero,a0,0x0
   8:	00000401 	0x401
   c:	00000005 	0x5
  10:	0c000000 	jal	0 <clearScreen-0x460>
  14:	f8000000 	0xf8000000
  18:	b4000004 	0xb4000004
  1c:	60000008 	0x60000008
  20:	d0000000 	0xd0000000
  24:	00020000 	sll	zero,v0,0x0
  28:	00680107 	0x680107
  2c:	00000460 	0x460
  30:	00000070 	0x70
  34:	019c0000 	0x19c0000
  38:	005f0300 	0x5f0300
  3c:	00015e01 	0x15e01
  40:	0e000000 	jal	8000000 <_gp+0x7fe72e0>
  44:	5f029174 	0x5f029174
  48:	04000004 	bltz	zero,5c <clearScreen-0x404>
  4c:	74000000 	jalx	0 <clearScreen-0x460>
  50:	44056900 	0x44056900
  54:	010f0000 	0x10f0000
  58:	006c0291 	0x6c0291
  5c:	70000006 	0x70000006
  60:	04000000 	bltz	zero,64 <clearScreen-0x3fc>
  64:	65070106 	0x65070106
  68:	00000120 	0x120
  6c:	08040569 	j	1015a4 <_gp+0xe8884>
  70:	6e740009 	0x6e740009
  74:	00000101 	0x101
  78:	01130000 	0x1130000
  7c:	04d00000 	bltzal	a2,80 <clearScreen-0x3e0>
  80:	0060019c 	0x60019c
  84:	000000af 	0xaf
  88:	0a780001 	j	9e00004 <_gp+0x9de72e4>
  8c:	13000000 	beqz	t8,90 <clearScreen-0x3d0>
  90:	6c029100 	0x6c029100
  94:	0a790001 	j	9e40004 <_gp+0x9e272e4>
  98:	13000000 	beqz	t8,9c <clearScreen-0x3c4>
  9c:	6c029104 	0x6c029104
  a0:	0b000000 	j	c000000 <_gp+0xbfe72e0>
  a4:	ae011300 	sw	at,4864(s0)
  a8:	0000af02 	srl	s5,zero,0x1c
  ac:	91080007 	lbu	t0,7(t0)
  b0:	01080000 	0x1080000
  b4:	01170200 	0x1170200
  b8:	0000a101 	0xa101
  bc:	17000005 	bnez	t8,d4 <clearScreen-0x38c>
  c0:	30000000 	andi	zero,zero,0x0
  c4:	38019c00 	xori	at,zero,0x9c00
  c8:	0000da03 	sra	k1,zero,0x8
  cc:	0000019f 	0x19f
  d0:	01190000 	0x1190000
  d4:	00da0291 	0xda0291
  d8:	70000604 	0x70000604
  dc:	0000006c 	0x6c
  e0:	02000000 	0x2000000
  e4:	8a011c00 	lwl	at,7168(s0)
  e8:	00056800 	sll	t5,a1,0x0
  ec:	0007c801 	0x7c801
  f0:	9c000003 	0x9c000003
  f4:	aa030000 	swl	v1,0(s0)
  f8:	015e0123 	0x15e0123
  fc:	0000005f 	0x5f
 100:	0391a47f 	0x391a47f
 104:	03000001 	0x3000001
 108:	c2012600 	lwc0	c0_random,9728(s0)
 10c:	0000da03 	sra	k1,zero,0x8
 110:	91a87f03 	lbu	t0,32515(t5)
 114:	0000019f 	0x19f
 118:	01290000 	0x1290000
 11c:	00da0391 	0xda0391
 120:	ac7f0300 	sw	ra,768(v1)
 124:	00015601 	0x15601
 128:	2c000000 	sltiu	zero,zero,0
 12c:	5f0391b0 	0x5f0391b0
 130:	7f030000 	0x7f030000
 134:	0074012d 	0x74012d
 138:	0000005f 	0x5f
 13c:	0391b47f 	0x391b47f
 140:	03000001 	0x3000001
 144:	8c012e00 	lw	at,11776(zero)
 148:	00005f03 	sra	t3,zero,0x1c
 14c:	91b87f03 	lbu	t8,32515(t5)
 150:	0000012d 	0x12d
 154:	012f0000 	0x12f0000
 158:	005f0391 	0x5f0391
 15c:	bc7f0300 	0xbc7f0300
 160:	00000001 	0x1
 164:	30000000 	andi	zero,zero,0x0
 168:	5f029140 	0x5f029140
 16c:	03000001 	0x3000001
 170:	af013100 	sw	at,12544(t8)
 174:	00005f02 	srl	t3,zero,0x1c
 178:	91440300 	lbu	a0,768(t2)
 17c:	00015101 	0x15101
 180:	32000000 	andi	zero,s0,0x0
 184:	5f029148 	0x5f029148
 188:	03000001 	0x3000001
 18c:	b5013500 	0xb5013500
 190:	0000da02 	srl	k1,zero,0x8
 194:	914c0300 	lbu	t4,768(t2)
 198:	00010a01 	0x10a01
 19c:	36000000 	ori	zero,s0,0x0
 1a0:	da029150 	0xda029150
 1a4:	03000001 	0x3000001
 1a8:	63013800 	0x63013800
 1ac:	0003aa02 	srl	s5,v1,0x8
 1b0:	91540300 	lbu	s4,768(t2)
 1b4:	00017f01 	0x17f01
 1b8:	39000000 	xori	zero,t0,0x0
 1bc:	af029158 	sw	v0,-28328(t8)
 1c0:	03000000 	0x3000000
 1c4:	ed013a00 	swc3	$1,14848(t0)
 1c8:	0003aa02 	srl	s5,v1,0x8
 1cc:	915c0300 	lbu	gp,768(t2)
 1d0:	00007e01 	0x7e01
 1d4:	3d000003 	0x3d000003
 1d8:	aa029160 	swl	v0,-28320(s0)
 1dc:	03000001 	0x3000001
 1e0:	97013e00 	lhu	at,15872(t8)
 1e4:	0003aa03 	sra	s5,v1,0x8
 1e8:	91e07e03 	lbu	zero,32259(t7)
 1ec:	00000125 	0x125
 1f0:	013f0000 	0x13f0000
 1f4:	03aa0391 	0x3aa0391
 1f8:	e47e0300 	swc1	$f30,768(v1)
 1fc:	00016b01 	0x16b01
 200:	40000003 	0x40000003
 204:	aa0391e8 	swl	v1,-28184(s0)
 208:	7e05625f 	0x7e05625f
 20c:	78000178 	0x78000178
 210:	0000006c 	0x6c
 214:	03918c7f 	0x3918c7f
 218:	05625f79 	0x5625f79
 21c:	00017900 	sll	t7,at,0x4
 220:	00006c03 	sra	t5,zero,0x10
 224:	91907f03 	lbu	s0,32515(t4)
 228:	00000141 	0x141
 22c:	017a0000 	0x17a0000
 230:	03aa0291 	0x3aa0291
 234:	64030000 	0x64030000
 238:	0172017b 	0x172017b
 23c:	000003aa 	0x3aa
 240:	0391947f 	0x391947f
 244:	0c000006 	jal	18 <clearScreen-0x448>
 248:	3c000000 	lui	zero,0x0
 24c:	48000002 	0x48000002
 250:	5f056900 	0x5f056900
 254:	01490000 	0x1490000
 258:	006c0391 	0x6c0391
 25c:	ec7e000c 	swc3	$30,12(v1)
 260:	000006c8 	0x6c8
 264:	00000048 	0x48
 268:	0000027a 	0x27a
 26c:	05690001 	0x5690001
 270:	50000000 	0x50000000
 274:	6c0391f0 	0x6c0391f0
 278:	7e000c00 	0x7e000c00
 27c:	00075400 	sll	t2,a3,0x10
 280:	0000dc00 	sll	k1,zero,0x10
 284:	0002c705 	0x2c705
 288:	69000156 	0x69000156
 28c:	0000006c 	0x6c
 290:	0391f47e 	0x391f47e
 294:	0c000007 	jal	1c <clearScreen-0x444>
 298:	60000000 	0x60000000
 29c:	54000002 	0x54000002
 2a0:	af056700 	sw	a1,26368(t8)
 2a4:	01570000 	0x1570000
 2a8:	006c0391 	0x6c0391
 2ac:	f87e0004 	0xf87e0004
 2b0:	000007b4 	0x7b4
 2b4:	00000058 	0x58
 2b8:	05670001 	0x5670001
 2bc:	5a000000 	0x5a000000
 2c0:	6c0391fc 	0x6c0391fc
 2c4:	7e00000c 	0x7e00000c
 2c8:	00000830 	0x830
 2cc:	000000e0 	0xe0
 2d0:	00000314 	0x314
 2d4:	05690001 	0x5690001
 2d8:	5f000000 	0x5f000000
 2dc:	6c039180 	0x6c039180
 2e0:	7f0c0000 	0x7f0c0000
 2e4:	08400000 	j	1000000 <_gp+0xfe72e0>
 2e8:	00540000 	0x540000
 2ec:	02fc0567 	0x2fc0567
 2f0:	00016000 	sll	t4,at,0x0
 2f4:	00006c03 	sra	t5,zero,0x10
 2f8:	91847f00 	lbu	a0,32512(t4)
 2fc:	04000008 	bltz	zero,320 <clearScreen-0x140>
 300:	94000000 	lhu	zero,0(zero)
 304:	58056700 	0x58056700
 308:	01630000 	0x1630000
 30c:	006c0391 	0x6c0391
 310:	887f0000 	lwl	ra,0(v1)
 314:	0400000a 	bltz	zero,340 <clearScreen-0x120>
 318:	48000002 	0x48000002
 31c:	e0030000 	swc0	$3,0(zero)
 320:	013c017e 	0x13c017e
 324:	0000006c 	0x6c
 328:	02916803 	0x2916803
 32c:	00000137 	0x137
 330:	017f0000 	0x17f0000
 334:	006c0291 	0x6c0291
 338:	6c0c0000 	0x6c0c0000
 33c:	0b780000 	j	de00000 <_gp+0xdde72e0>
 340:	00480000 	0x480000
 344:	03540569 	0x3540569
 348:	00018c00 	sll	s1,at,0x10
 34c:	00006c03 	sra	t5,zero,0x10
 350:	91987f00 	lbu	t8,32512(t4)
 354:	0400000b 	bltz	zero,384 <clearScreen-0xdc>
 358:	c0000001 	lwc0	c0_index,1(zero)
 35c:	44057800 	mfc1	a1,$f15
 360:	01920000 	0x1920000
 364:	006c0391 	0x6c0391
 368:	9c7f0400 	0x9c7f0400
 36c:	000bd000 	sll	k0,t3,0x0
 370:	00011005 	0x11005
 374:	79000193 	0x79000193
 378:	0000006c 	0x6c
 37c:	0391a07f 	0x391a07f
 380:	0400000b 	bltz	zero,3b0 <clearScreen-0xb0>
 384:	e0000000 	swc0	c0_index,0(zero)
 388:	dc030000 	0xdc030000
 38c:	008f0194 	0x8f0194
 390:	0000006c 	0x6c
 394:	02917003 	0x2917003
 398:	00000098 	0x98
 39c:	01950000 	0x1950000
 3a0:	006c0291 	0x6c0291
 3a4:	74000000 	jalx	0 <clearScreen-0x460>
 3a8:	00000704 	0x704
 3ac:	07000000 	bltz	t8,3b0 <clearScreen-0xb0>
 3b0:	Address 0x00000000000003b0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01110125 	0x1110125
   4:	0e130b03 	jal	84c2c0c <_gp+0x84a9eec>
   8:	0e1b0e11 	jal	86c3844 <_gp+0x86aab24>
   c:	01120610 	0x1120610
  10:	17000002 	bnez	t8,1c <clearScreen-0x444>
  14:	2e013f19 	sltiu	at,s0,16153
  18:	030e3a0b 	0x30e3a0b
  1c:	3b0b1101 	xori	t3,t8,0x1101
  20:	12064018 	beq	s0,a2,10084 <main+0xfb1c>
  24:	97421901 	lhu	v0,6401(k0)
  28:	13000003 	beqz	t8,38 <clearScreen-0x428>
  2c:	3400030e 	li	zero,0x30e
  30:	3a0b3b0b 	xori	t3,s0,0x3b0b
  34:	49130218 	0x49130218
  38:	0000040b 	0x40b
  3c:	01110112 	0x1110112
  40:	06000005 	bltz	s0,58 <clearScreen-0x408>
  44:	34000308 	li	zero,0x308
  48:	3a0b3b0b 	xori	t3,s0,0x3b0b
  4c:	49130218 	0x49130218
  50:	0000060f 	0x60f
  54:	000b0b49 	0xb0b49
  58:	13000007 	beqz	t8,78 <clearScreen-0x3e8>
  5c:	24000b0b 	li	zero,2827
  60:	3e0b030e 	0x3e0b030e
  64:	00000824 	and	at,zero,zero
  68:	000b0b3e 	0xb0b3e
  6c:	0b030800 	j	c0c2000 <_gp+0xc0a92e0>
  70:	00092e01 	0x92e01
  74:	3f19030e 	0x3f19030e
  78:	3a0b3b0b 	xori	t3,s0,0x3b0b
  7c:	27191101 	addiu	t9,t8,4353
  80:	12064018 	beq	s0,a2,100e4 <main+0xfb7c>
  84:	97421901 	lhu	v0,6401(k0)
  88:	1300000a 	beqz	t8,b4 <clearScreen-0x3ac>
  8c:	05000308 	bltz	t0,cb0 <main+0x748>
  90:	3a0b3b0b 	xori	t3,s0,0x3b0b
  94:	49130218 	0x49130218
  98:	00000b05 	0xb05
  9c:	00030e3a 	0x30e3a
  a0:	0b3b0b49 	j	cec2d24 <_gp+0xceaa004>
  a4:	13021800 	beq	t8,v0,60a8 <main+0x5b40>
  a8:	000c0b01 	0xc0b01
  ac:	11011206 	beq	t0,at,48c8 <main+0x4360>
  b0:	01130000 	0x1130000
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001ec 	0x1ec
   4:	00020000 	sll	zero,v0,0x0
   8:	001f0101 	0x1f0101
   c:	fb0e0d00 	0xfb0e0d00
  10:	01010101 	0x1010101
  14:	00000001 	0x1
  18:	0000012e 	0x12e
  1c:	00006d61 	0x6d61
  20:	696e2e63 	0x696e2e63
  24:	00010000 	sll	zero,at,0x0
  28:	00000502 	srl	zero,zero,0x14
  2c:	00000460 	0x460
  30:	18c18300 	0x18c18300
  34:	020403bb 	0x20403bb
  38:	00020403 	sra	zero,v0,0x10
  3c:	083b0002 	j	ec0008 <_gp+0xea72e8>
  40:	040106f2 	b	1c0c <main+0x16a4>
  44:	06083f08 	0x6083f08
  48:	7508ae02 	jalx	422b808 <_gp+0x4212ae8>
  4c:	2c130875 	sltiu	s3,zero,2165
  50:	bc83bb08 	0xbc83bb08
  54:	75c18585 	jalx	7061614 <_gp+0x70488f4>
  58:	85838383 	lh	v1,-31869(t4)
  5c:	83838385 	lb	v1,-31867(gp)
  60:	83844b4b 	lb	a0,19275(gp)
  64:	4d834b4b 	0x4d834b4b
  68:	4c083e08 	0x4c083e08
  6c:	af087600 	sw	t0,30208(t8)
  70:	020403bb 	0x20403bb
  74:	00020403 	sra	zero,v0,0x10
  78:	08730002 	j	1cc0008 <_gp+0x1ca72e8>
  7c:	040106f2 	b	1c48 <main+0x16e0>
  80:	06083f08 	0x6083f08
  84:	3e000204 	0x3e000204
  88:	01060874 	0x1060874
  8c:	06087600 	0x6087600
  90:	020403bb 	0x20403bb
  94:	00020403 	sra	zero,v0,0x10
  98:	08730002 	j	1cc0008 <_gp+0x1ca72e8>
  9c:	040106f2 	b	1c68 <main+0x1700>
  a0:	06083f08 	0x6083f08
  a4:	3e000204 	0x3e000204
  a8:	01060874 	0x1060874
  ac:	060875bb 	0x60875bb
  b0:	00020403 	sra	zero,v0,0x10
  b4:	bb000204 	swr	zero,516(t8)
  b8:	03022411 	0x3022411
  bc:	00020401 	0x20401
  c0:	06f20608 	0x6f20608
  c4:	3f000204 	0x3f000204
  c8:	03f30002 	0x3f30002
  cc:	04030224 	0x4030224
  d0:	11000204 	beqz	t0,8e4 <main+0x37c>
  d4:	0106f200 	0x106f200
  d8:	02040206 	0x2040206
  dc:	08380002 	j	e00008 <_gp+0xde72e8>
  e0:	040106f2 	b	1cac <main+0x1744>
  e4:	06030908 	0x6030908
  e8:	3cf30002 	0x3cf30002
  ec:	0403bb00 	0x403bb00
  f0:	02040302 	0x2040302
  f4:	24110002 	li	s1,2
  f8:	040106f2 	b	1cc4 <main+0x175c>
  fc:	06083f00 	0x6083f00
 100:	020403f3 	0x20403f3
 104:	00020403 	sra	zero,v0,0x10
 108:	02241100 	0x2241100
 10c:	02040106 	0x2040106
 110:	f2000204 	0xf2000204
 114:	02060838 	0x2060838
 118:	00020401 	0x20401
 11c:	06f20608 	0x6f20608
 120:	44083e08 	0x44083e08
 124:	75f3f3f6 	jalx	7cfcfd8 <_gp+0x7ce42b8>
 128:	02301500 	0x2301500
 12c:	02040106 	0x2040106
 130:	08740002 	j	1d00008 <_gp+0x1ce72e8>
 134:	04020874 	0x4020874
 138:	00020403 	sra	zero,v0,0x10
 13c:	08740603 	j	1d0180c <_gp+0x1ce8aec>
 140:	5208e403 	0x5208e403
 144:	304a8583 	andi	t2,v0,0x8583
 148:	83083d08 	lb	t0,15624(t8)
 14c:	3f000204 	0x3f000204
 150:	01060874 	0x1060874
 154:	00020402 	srl	zero,v0,0x10
 158:	ba000204 	swr	zero,516(s0)
 15c:	044a0002 	0x44a0002
 160:	04040608 	0x4040608
 164:	e5000204 	swc1	$f0,516(t0)
 168:	01060234 	0x1060234
 16c:	12000204 	beqz	s0,980 <main+0x418>
 170:	02ba0002 	0x2ba0002
 174:	04044a00 	0x4044a00
 178:	02040406 	0x2040406
 17c:	85022c13 	lh	v0,11283(t0)
 180:	083d083d 	j	f420f4 <_gp+0xf293d4>
 184:	084008ad 	j	10022b4 <_gp+0xfe9594>
 188:	08760002 	j	1d80008 <_gp+0x1d672e8>
 18c:	0403bb00 	0x403bb00
 190:	02040308 	0x2040308
 194:	73000204 	0x73000204
 198:	0106f206 	0x106f206
 19c:	0842f3f3 	j	10bcfcc <_gp+0x10a42ac>
 1a0:	083d083d 	j	f420f4 <_gp+0xf293d4>
 1a4:	00020401 	0x20401
 1a8:	06f20002 	0x6f20002
 1ac:	0402083c 	0x402083c
 1b0:	00020403 	sra	zero,v0,0x10
 1b4:	f206083d 	0xf206083d
 1b8:	00020401 	0x20401
 1bc:	06025812 	0x6025812
 1c0:	00020402 	srl	zero,v0,0x10
 1c4:	ba000204 	swr	zero,516(s0)
 1c8:	044a0002 	0x44a0002
 1cc:	04020646 	0x4020646
 1d0:	00020401 	0x20401
 1d4:	06f20002 	0x6f20002
 1d8:	04020608 	0x4020608
 1dc:	3b000204 	xori	zero,t8,0x204
 1e0:	0106f206 	0x106f206
 1e4:	030a083c 	0x30a083c
 1e8:	bf087502 	0xbf087502
 1ec:	08000101 	j	404 <clearScreen-0x5c>

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	syscall
   4:	ffffffff 	0xffffffff
   8:	0100017c 	0x100017c
   c:	1f0d1d00 	0x1f0d1d00
  10:	00000020 	add	zero,zero,zero
  14:	00000000 	nop
  18:	00000460 	0x460
  1c:	00000070 	0x70
  20:	440e1844 	0x440e1844
  24:	9e01440d 	0x9e01440d
  28:	1e02540d 	0x1e02540d
  2c:	1d48de0e 	0x1d48de0e
  30:	00000000 	nop
  34:	00000020 	add	zero,zero,zero
  38:	00000000 	nop
  3c:	000004d0 	0x4d0
  40:	00000060 	0x60
  44:	440e0844 	0x440e0844
  48:	9e01440d 	0x9e01440d
  4c:	1e02440d 	0x1e02440d
  50:	1d48de0e 	0x1d48de0e
  54:	00000000 	nop
  58:	0000001c 	0x1c
  5c:	00000000 	nop
  60:	00000530 	0x530
  64:	00000038 	0x38
  68:	440e1844 	0x440e1844
  6c:	9e01440d 	0x9e01440d
  70:	1e5c0d1d 	0x1e5c0d1d
  74:	48de0e00 	0x48de0e00
  78:	00000018 	mult	zero,zero
  7c:	00000000 	nop
  80:	00000568 	0x568
  84:	000007c8 	0x7c8
  88:	440ea801 	0x440ea801
  8c:	449e0144 	0x449e0144
  90:	0d1e0000 	jal	4780000 <_gp+0x47672e0>

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	724b6579 	0x724b6579
   4:	00474e55 	0x474e55
   8:	20433131 	addi	v1,v0,12593
   c:	20352e34 	addi	s5,at,11828
  10:	2e302032 	sltiu	s0,s1,8242
  14:	30313630 	andi	s1,at,0x3630
  18:	36303920 	ori	s0,s1,0x3920
  1c:	2d6d6562 	sltiu	t5,t3,25954
  20:	202d6d69 	addi	t5,at,28009
  24:	70733120 	0x70733120
  28:	2d6d6670 	sltiu	t5,t3,26224
  2c:	3332202d 	andi	s2,t9,0x202d
  30:	6d686172 	0x6d686172
  34:	642d666c 	0x642d666c
  38:	6f617420 	0x6f617420
  3c:	2d6d6c6c 	sltiu	t5,t3,27756
  40:	7363202d 	0x7363202d
  44:	6d6e6f2d 	0x6d6e6f2d
  48:	73686172 	0x73686172
  4c:	6564202d 	0x6564202d
  50:	6d616269 	0x6d616269
  54:	3d333220 	0x3d333220
  58:	2d670075 	sltiu	a3,t3,117
  5c:	6e736967 	0x6e736967
  60:	6e656420 	0x6e656420
  64:	696e7400 	0x696e7400
  68:	636c6561 	0x636c6561
  6c:	72536372 	0x72536372
  70:	65656e00 	0x65656e00
  74:	646f776e 	0x646f776e
  78:	4172726f 	0x4172726f
  7c:	77006375 	jalx	c018dd4 <_gp+0xc0000b4>
  80:	7272656e 	0x7272656e
  84:	7454696d 	jalx	151a5b4 <_gp+0x1501894>
  88:	65006d61 	0x65006d61
  8c:	696e0063 	0x696e0063
  90:	75727265 	jalx	5c9c994 <_gp+0x5c83c74>
  94:	6e745800 	0x6e745800
  98:	63757272 	0x63757272
  9c:	656e7459 	0x656e7459
  a0:	00757064 	0x757064
  a4:	61746553 	0x61746553
  a8:	63726565 	0x63726565
  ac:	6e007069 	0x6e007069
  b0:	78656c00 	0x78656c00
  b4:	2f686f6d 	sltiu	t0,k1,28525
  b8:	652f696d 	0x652f696d
  bc:	61757374 	0x61757374
  c0:	796e2f44 	0x796e2f44
  c4:	65736b74 	0x65736b74
  c8:	6f702f46 	0x6f702f46
  cc:	50474143 	0x50474143
  d0:	6f6d7075 	0x6f6d7075
  d4:	7465722f 	jalx	195c8bc <_gp+0x1943b9c>
  d8:	536f6674 	0x536f6674
  dc:	77617265 	jalx	d85c994 <_gp+0xd843c74>
  e0:	2f446973 	sltiu	a0,k0,26995
  e4:	706c6179 	0x706c6179
  e8:	54657374 	0x54657374
  ec:	006c6173 	0x6c6173
  f0:	74536563 	jalx	14d958c <_gp+0x14c086c>
  f4:	6f6e6400 	0x6f6e6400
  f8:	2e2f6d61 	sltiu	t7,s1,28001
  fc:	696e2e63 	0x696e2e63
 100:	00736574 	0x736574
 104:	50697865 	0x50697865
 108:	6c006d69 	0x6c006d69
 10c:	63726f43 	0x63726f43
 110:	6f756e74 	0x6f756e74
 114:	65720075 	0x65720075
 118:	6e736967 	0x6e736967
 11c:	6e656420 	0x6e656420
 120:	63686172 	0x63686172
 124:	0072656e 	0x72656e
 128:	64657232 	0x64657232
 12c:	006c6566 	0x6c6566
 130:	74417272 	jalx	105c9c8 <_gp+0x1043ca8>
 134:	6f770079 	0x6f770079
 138:	4d6f6400 	0x4d6f6400
 13c:	784d6f64 	0x784d6f64
 140:	006c6173 	0x6c6173
 144:	74446973 	jalx	111a5cc <_gp+0x11018ac>
 148:	706c6179 	0x706c6179
 14c:	54696d65 	0x54696d65
 150:	00684b65 	0x684b65
 154:	79007570 	0x79007570
 158:	4172726f 	0x4172726f
 15c:	77007672 	jalx	c01d9c8 <_gp+0xc004ca8>
 160:	616d0063 	0x616d0063
 164:	6f756e74 	0x6f756e74
 168:	65720072 	0x65720072
 16c:	65736574 	0x65736574
 170:	31006c61 	andi	zero,t0,0x6c61
 174:	73744d6f 	0x73744d6f
 178:	76655469 	jalx	99551a4 <_gp+0x993c484>
 17c:	6d650063 	0x6d650063
 180:	75727265 	jalx	5c9c994 <_gp+0x5c83c74>
 184:	6e74436f 	0x6e74436f
 188:	6c6f7200 	0x6c6f7200
 18c:	72696768 	0x72696768
 190:	74417272 	jalx	105c9c8 <_gp+0x1043ca8>
 194:	6f770072 	0x6f770072
 198:	656e6465 	0x656e6465
 19c:	7231006d 	0x7231006d
 1a0:	61747269 	0x61747269
 1a4:	785f7365 	0x785f7365
 1a8:	7474696e 	jalx	1d1a5b8 <_gp+0x1d01898>
 1ac:	67730073 	0x67730073
 1b0:	68696674 	0x68696674
 1b4:	006d696c 	0x6d696c
 1b8:	6c69436f 	0x6c69436f
 1bc:	756e7465 	jalx	5b9d194 <_gp+0x5b84474>
 1c0:	72007365 	0x72007365
 1c4:	676d656e 	0x676d656e
 1c8:	74656444 	jalx	1959110 <_gp+0x19403f0>
 1cc:	6973706c 	0x6973706c
 1d0:	Address 0x00000000000001d0 is out of bounds.


Disassembly of section .gnu.attributes:

00000000 <.gnu.attributes>:
   0:	41000000 	bc0f	4 <clearScreen-0x45c>
   4:	0f676e75 	jal	d9db9d4 <_gp+0xd9c2cb4>
   8:	00010000 	sll	zero,at,0x0
   c:	00070401 	0x70401
